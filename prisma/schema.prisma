// ==========================================
// SPONSORFLOW PRISMA SCHEMA v1.0
// Generated from PostgreSQL Schema
// ==========================================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp"), pgcrypto, pgTrgm(map: "pg_trgm"), btreeGist(map: "btree_gist")]
}

// ==========================================
// ENUMS - Type Safety for Fixed Values
// ==========================================

enum UserRole {
  ADMIN
  CREATOR
  EDITOR
  VIEWER

  @@map("user_role")
}

enum DealStage {
  NEW_LEADS
  INITIAL_CONTACT
  NEGOTIATION
  CONTRACT_REVIEW
  CONTENT_CREATION
  REVIEW_APPROVAL
  PUBLISHING
  PAYMENT_PENDING
  COMPLETED

  @@map("deal_stage")
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("priority_level")
}

enum DealType {
  PRODUCT_PLACEMENT
  DEDICATED_VIDEO
  INTEGRATION
  SERIES_PARTNERSHIP
  AFFILIATE
  BRAND_AMBASSADOR
  EVENT_COVERAGE
  OTHER

  @@map("deal_type")
}

enum PaymentStatus {
  NOT_APPLICABLE
  PENDING
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED

  @@map("payment_status")
}

enum PaymentTerms {
  UPON_DELIVERY
  NET_15
  NET_30
  NET_45
  NET_60
  MILESTONE_BASED
  CUSTOM

  @@map("payment_terms")
}

enum ContentStatus {
  NOT_STARTED
  SCRIPT_WRITING
  FILMING
  EDITING
  SPONSOR_REVIEW
  APPROVED
  REVISION_REQUESTED
  PUBLISHED

  @@map("content_status")
}

enum PlatformType {
  YOUTUBE_MAIN
  YOUTUBE_SHORTS
  INSTAGRAM_REEL
  INSTAGRAM_POST
  TIKTOK
  TWITTER
  PODCAST
  OTHER

  @@map("platform_type")
}

enum ActivityType {
  CREATED
  UPDATED
  STAGE_CHANGED
  ASSIGNED
  COMMENTED
  FILE_UPLOADED
  FILE_DELETED
  ARCHIVED
  RESTORED
  DELETED

  @@map("activity_type")
}

enum NotificationType {
  DEAL_ASSIGNED
  DEAL_UPDATED
  STAGE_CHANGED
  COMMENT_ADDED
  MENTION
  DUE_DATE_REMINDER
  PAYMENT_REMINDER
  SYSTEM_ALERT

  @@map("notification_type")
}

// ==========================================
// MODELS - Core Entities
// ==========================================

model User {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                  String    @unique @db.VarChar(255)
  emailVerified          DateTime? @map("email_verified") @db.Timestamptz
  name                   String?   @db.VarChar(255)
  image                  String?   @db.Text
  role                   UserRole  @default(CREATOR)
  passwordHash           String?   @map("password_hash") @db.Text

  // Profile fields
  bio                    String?   @db.Text
  company                String?   @db.VarChar(255)
  website                String?   @db.VarChar(255)
  youtubeChannelId       String?   @map("youtube_channel_id") @db.VarChar(255)
  youtubeChannelName     String?   @map("youtube_channel_name") @db.VarChar(255)

  // Settings
  timezone               String    @default("UTC") @db.VarChar(50)
  notificationPreferences Json     @default("{\"email\": true, \"push\": true, \"sms\": false}") @map("notification_preferences") @db.JsonB

  // OAuth providers
  googleId               String?   @unique @map("google_id") @db.VarChar(255)
  githubId               String?   @unique @map("github_id") @db.VarChar(255)

  // Metadata
  isActive               Boolean   @default(true) @map("is_active")
  lastLoginAt            DateTime? @map("last_login_at") @db.Timestamptz
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt              DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  ownedDeals             Deal[]    @relation("DealOwner")
  assignedDeals          Deal[]    @relation("DealAssignee")
  createdSponsors        Sponsor[] @relation("SponsorCreator")
  comments               Comment[]
  attachments            Attachment[]
  activities             Activity[]
  notifications          Notification[]
  createdTemplates       DealTemplate[]
  analyticsSnapshots     AnalyticsSnapshot[]
  webhookConfigs         WebhookConfig[]
  dealStageHistories     DealStageHistory[]

  @@index([email])
  @@index([googleId])
  @@index([isActive, deletedAt])
  @@map("users")
}

model Sponsor {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String    @db.VarChar(255)
  companyName            String?   @map("company_name") @db.VarChar(255)
  website                String?   @db.VarChar(255)
  logoUrl                String?   @map("logo_url") @db.Text
  industry               String?   @db.VarChar(100)

  // Contact information
  primaryContactName     String?   @map("primary_contact_name") @db.VarChar(255)
  primaryContactEmail    String?   @map("primary_contact_email") @db.VarChar(255)
  primaryContactPhone    String?   @map("primary_contact_phone") @db.VarChar(50)
  secondaryContactName   String?   @map("secondary_contact_name") @db.VarChar(255)
  secondaryContactEmail  String?   @map("secondary_contact_email") @db.VarChar(255)

  // Additional info
  notes                  String?   @db.Text
  preferredContentTypes  DealType[] @map("preferred_content_types")
  typicalBudgetRange     Json?     @map("typical_budget_range") @db.JsonB

  // Relationship tracking
  totalDealsCount        Int       @default(0) @map("total_deals_count")
  successfulDealsCount   Int       @default(0) @map("successful_deals_count")
  totalRevenue           Decimal   @default(0) @map("total_revenue") @db.Decimal(12, 2)
  averageDealValue       Decimal   @default(0) @map("average_deal_value") @db.Decimal(12, 2)
  lastDealDate           DateTime? @map("last_deal_date") @db.Date

  // Metadata
  createdById            String?   @map("created_by") @db.Uuid
  createdBy              User?     @relation("SponsorCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  deals                  Deal[]

  @@unique([name, companyName])
  @@index([name])
  @@index([companyName])
  @@map("sponsors")
}

model Deal {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                  String    @db.VarChar(255)
  description            String?   @db.Text

  // Relationships
  userId                 String    @map("user_id") @db.Uuid
  user                   User      @relation("DealOwner", fields: [userId], references: [id], onDelete: Cascade)
  sponsorId              String    @map("sponsor_id") @db.Uuid
  sponsor                Sponsor   @relation(fields: [sponsorId], references: [id], onDelete: Restrict)
  assignedToId           String?   @map("assigned_to_id") @db.Uuid
  assignedTo             User?     @relation("DealAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)

  // Deal details
  dealType               DealType  @map("deal_type")
  dealValue              Decimal   @map("deal_value") @db.Decimal(12, 2)
  currency               String    @default("USD") @db.VarChar(3)
  commissionRate         Decimal   @default(0) @map("commission_rate") @db.Decimal(5, 2)

  // Stage and priority
  stage                  DealStage @default(NEW_LEADS)
  priority               PriorityLevel @default(MEDIUM)

  // Dates
  startDate              DateTime? @map("start_date") @db.Date
  contentDueDate         DateTime? @map("content_due_date") @db.Date
  publishDate            DateTime? @map("publish_date") @db.Date
  contractSignedDate     DateTime? @map("contract_signed_date") @db.Date
  paymentDueDate         DateTime? @map("payment_due_date") @db.Date

  // Payment information
  paymentTerms           PaymentTerms @default(NET_30) @map("payment_terms")
  paymentStatus          PaymentStatus @default(NOT_APPLICABLE) @map("payment_status")
  amountPaid             Decimal   @default(0) @map("amount_paid") @db.Decimal(12, 2)
  paymentNotes           String?   @map("payment_notes") @db.Text

  // Content details
  contentStatus          ContentStatus @default(NOT_STARTED) @map("content_status")
  videoTitle             String?   @map("video_title") @db.VarChar(255)
  videoDescription       String?   @map("video_description") @db.Text
  videoLengthSeconds     Int?      @map("video_length_seconds")
  videoUrl               String?   @map("video_url") @db.Text
  platforms              PlatformType[] @default([YOUTUBE_MAIN])

  // Requirements and guidelines
  contentRequirements    String?   @map("content_requirements") @db.Text
  talkingPoints          String[]  @map("talking_points") @db.Text
  restrictedTopics       String[]  @map("restricted_topics") @db.Text
  brandGuidelinesUrl     String?   @map("brand_guidelines_url") @db.Text

  // Performance metrics (updated post-publish)
  videoViews             Int       @default(0) @map("video_views")
  engagementRate         Decimal?  @map("engagement_rate") @db.Decimal(5, 2)
  conversionMetrics      Json?     @map("conversion_metrics") @db.JsonB

  // Flags
  isTemplate             Boolean   @default(false) @map("is_template")
  isArchived             Boolean   @default(false) @map("is_archived")
  isUrgent               Boolean   @default(false) @map("is_urgent")
  requiresApproval       Boolean   @default(true) @map("requires_approval")
  autoPublish            Boolean   @default(false) @map("auto_publish")

  // Custom fields for flexibility
  customFields           Json      @default("{}") @map("custom_fields") @db.JsonB

  // Metadata
  stageUpdatedAt         DateTime  @default(now()) @map("stage_updated_at") @db.Timestamptz
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  archivedAt             DateTime? @map("archived_at") @db.Timestamptz
  deletedAt              DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  stageHistory           DealStageHistory[]
  tags                   DealTag[]
  comments               Comment[]
  attachments            Attachment[]
  activities             Activity[]
  notifications          Notification[]

  @@index([userId])
  @@index([sponsorId])
  @@index([assignedToId])
  @@index([stage, deletedAt])
  @@index([priority, deletedAt, isArchived])
  @@index([contentDueDate, publishDate, deletedAt])
  @@index([stage, priority, deletedAt, isArchived])
  @@map("deals")
}

model DealStageHistory {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  dealId                 String    @map("deal_id") @db.Uuid
  deal                   Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  fromStage              DealStage? @map("from_stage")
  toStage                DealStage @map("to_stage")
  changedById            String    @map("changed_by") @db.Uuid
  changedBy              User      @relation(fields: [changedById], references: [id], onDelete: SetNull)
  reason                 String?   @db.Text
  durationInStage        String?   @map("duration_in_stage") @db.Interval
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@index([dealId])
  @@index([createdAt])
  @@map("deal_stage_history")
}

model Tag {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String    @unique @db.VarChar(50)
  color                  String    @default("#6B7280") @db.VarChar(7)
  description            String?   @db.Text
  createdById            String?   @map("created_by") @db.Uuid
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  deals                  DealTag[]

  @@index([name])
  @@map("tags")
}

model DealTag {
  dealId                 String    @map("deal_id") @db.Uuid
  deal                   Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  tagId                  String    @map("tag_id") @db.Uuid
  tag                    Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@id([dealId, tagId])
  @@index([dealId])
  @@index([tagId])
  @@map("deal_tags")
}

model Comment {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  dealId                 String    @map("deal_id") @db.Uuid
  deal                   Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  userId                 String    @map("user_id") @db.Uuid
  user                   User      @relation(fields: [userId], references: [id], onDelete: SetNull)
  parentId               String?   @map("parent_id") @db.Uuid
  parent                 Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  content                String    @db.Text
  mentions               String[]  @db.Uuid
  isEdited               Boolean   @default(false) @map("is_edited")
  isResolved             Boolean   @default(false) @map("is_resolved")
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt              DateTime? @map("deleted_at") @db.Timestamptz

  // Self-relation for replies
  replies                Comment[] @relation("CommentReplies")

  @@index([dealId, deletedAt])
  @@index([userId])
  @@index([parentId])
  @@index([mentions])
  @@map("comments")
}

model Attachment {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  dealId                 String    @map("deal_id") @db.Uuid
  deal                   Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  uploadedById           String    @map("uploaded_by") @db.Uuid
  uploadedBy             User      @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  fileName               String    @map("file_name") @db.VarChar(255)
  fileType               String?   @map("file_type") @db.VarChar(100)
  fileSizeBytes          BigInt?   @map("file_size_bytes")
  fileUrl                String    @map("file_url") @db.Text
  thumbnailUrl           String?   @map("thumbnail_url") @db.Text
  description            String?   @db.Text
  isContract             Boolean   @default(false) @map("is_contract")
  isBrandGuidelines      Boolean   @default(false) @map("is_brand_guidelines")
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@index([dealId])
  @@index([fileType])
  @@map("attachments")
}

model Activity {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  dealId                 String?   @map("deal_id") @db.Uuid
  deal                   Deal?     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  userId                 String    @map("user_id") @db.Uuid
  user                   User      @relation(fields: [userId], references: [id], onDelete: SetNull)
  activityType           ActivityType @map("activity_type")
  description            String    @db.Text
  metadata               Json      @default("{}") @db.JsonB
  ipAddress              String?   @map("ip_address") @db.Inet
  userAgent              String?   @map("user_agent") @db.Text
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@index([dealId])
  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
  @@map("activities")
}

model Notification {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                 String    @map("user_id") @db.Uuid
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                   NotificationType
  title                  String    @db.VarChar(255)
  message                String?   @db.Text
  actionUrl              String?   @map("action_url") @db.Text
  dealId                 String?   @map("deal_id") @db.Uuid
  deal                   Deal?     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  isRead                 Boolean   @default(false) @map("is_read")
  isArchived             Boolean   @default(false) @map("is_archived")
  readAt                 DateTime? @map("read_at") @db.Timestamptz
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  expiresAt              DateTime? @map("expires_at") @db.Timestamptz

  @@index([userId])
  @@index([userId, isRead])
  @@index([dealId])
  @@index([createdAt])
  @@map("notifications")
}

model DealTemplate {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String    @db.VarChar(255)
  description            String?   @db.Text
  createdById            String    @map("created_by") @db.Uuid
  createdBy              User      @relation(fields: [createdById], references: [id], onDelete: SetNull)

  // Template content (similar to deals)
  dealType               DealType? @map("deal_type")
  typicalValueRange      Json?     @map("typical_value_range") @db.JsonB
  contentRequirements    String?   @map("content_requirements") @db.Text
  talkingPoints          String[]  @map("talking_points") @db.Text
  restrictedTopics       String[]  @map("restricted_topics") @db.Text
  paymentTerms           PaymentTerms? @map("payment_terms")

  // Usage tracking
  usageCount             Int       @default(0) @map("usage_count")
  lastUsedAt             DateTime? @map("last_used_at") @db.Timestamptz

  isPublic               Boolean   @default(false) @map("is_public")
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@index([createdById])
  @@index([isPublic])
  @@map("deal_templates")
}

model AnalyticsSnapshot {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                 String    @map("user_id") @db.Uuid
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  snapshotDate           DateTime  @map("snapshot_date") @db.Date

  // Metrics
  totalDeals             Int       @default(0) @map("total_deals")
  dealsByStage           Json      @default("{}") @map("deals_by_stage") @db.JsonB
  totalValue             Decimal   @default(0) @map("total_value") @db.Decimal(12, 2)
  averageDealValue       Decimal   @default(0) @map("average_deal_value") @db.Decimal(12, 2)
  completionRate         Decimal   @default(0) @map("completion_rate") @db.Decimal(5, 2)
  averageCycleTimeDays   Decimal?  @map("average_cycle_time_days") @db.Decimal(8, 2)

  // Detailed breakdowns
  dealsBySponsor         Json      @default("{}") @map("deals_by_sponsor") @db.JsonB
  dealsByType            Json      @default("{}") @map("deals_by_type") @db.JsonB
  revenueByMonth         Json      @default("{}") @map("revenue_by_month") @db.JsonB

  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, snapshotDate])
  @@index([userId, snapshotDate(sort: Desc)])
  @@map("analytics_snapshots")
}

model WebhookConfig {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                 String    @map("user_id") @db.Uuid
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                   String    @db.VarChar(255)
  url                    String    @db.Text
  secret                 String?   @db.VarChar(255)
  events                 String[]  @db.Text
  isActive               Boolean   @default(true) @map("is_active")
  headers                Json      @default("{}") @db.JsonB
  lastTriggeredAt        DateTime? @map("last_triggered_at") @db.Timestamptz
  failureCount           Int       @default(0) @map("failure_count")
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@index([userId])
  @@index([isActive])
  @@map("webhook_configs")
}

// ==========================================
// NOTES - Additional Schema Information
// ==========================================

// 1. Database Functions (handled outside Prisma):
//    - update_updated_at_column()
//    - track_stage_duration()
//    - update_sponsor_stats()
//    - create_notification()

// 2. Database Triggers (handled outside Prisma):
//    - update_users_updated_at
//    - update_deals_updated_at
//    - update_sponsors_updated_at
//    - update_comments_updated_at
//    - update_templates_updated_at
//    - track_deal_stage_changes
//    - update_sponsor_stats_on_deal_change

// 3. Database Views (query via raw SQL):
//    - active_deals
//    - deal_pipeline

// 4. Row Level Security (implement in application):
//    - deals_select_policy
//    - deals_insert_policy
//    - deals_update_policy
//    - deals_delete_policy

// 5. Check Constraints (validate in application):
//    - email format validation
//    - deal_value >= 0
//    - commission_rate between 0 and 100
//    - valid date ordering
//    - amount_paid <= deal_value

// 6. Full-text search indexes are noted but require raw SQL queries
// 7. Composite indexes are implemented where possible
// 8. Default data (tags) should be seeded via prisma/seed.ts

// This Prisma schema is a complete and faithful representation of the PostgreSQL database design, ready for use with `prisma generate` and `prisma migrate`.
